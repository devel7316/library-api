require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/shelves", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Shelf. As you add validations to Shelf, be sure to
  # adjust the attributes here as well.
  let(:valid_entity) {
    {
      #book: build(:book),
      #client_id: 0,#
      #client: build(:client),
      #book: Book.all.sample,
      #client: Client.all.sample,
      book: build(:book),
      client: build(:client),
      quantity: 1,
      start_date: Faker::Date.between(from: 2.months.ago, to: 1.days.ago),
      end_date: 0,
      devolution_date: 0,
      status_id: 0
    }
  }

  let(:invalid_attributes) {
    { start_Date: nil, quantity: nil }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ShelvesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "model test..." do
    it "testing: model, attributes  & FactoryBot(build/create)" do
      #
      attr_shelf = Shelf.create! valid_entity
      expect(attr_shelf).to be_a(Shelf)
      #
      build_shelf = build(:shelf)
      expect(build_shelf).to be_a(Shelf)
      #
      create_shelf = create(:shelf)  
      expect(create_shelf).to be_a(Shelf)
    end
  end
  
  describe "GET /index" do
    it "renders a successful response" do
      shelf = build(:shelf)
      get shelves_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      shelf = Shelf.create! valid_entity
      get shelf_url(shelf), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Shelf" do
        shelf = create(:shelf)
        expect {
          post shelves_url,
               params: { shelf: shelf }, headers: valid_headers, as: :json
        }.to change(Shelf, :count).by(1)
      end

      it "renders a JSON response with the new shelf" do
        shelf = create(:shelf)  
        post shelves_url,
             params: { shelf: shelf }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Shelf" do
        expect {
          post shelves_url,
               params: { shelf: invalid_attributes }, as: :json
        }.to change(Shelf, :count).by(0)
      end

      it "renders a JSON response with errors for the new shelf" do
        post shelves_url,
             params: { shelf: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      it "updates the requested shelf" do
        shelf = Shelf.create! valid_entity
        patch shelf_url(shelf),
              params: { shelf: shelf }, headers: valid_headers, as: :json
        shelf.reload
      end

      it "renders a JSON response with the shelf" do
        shelf = Shelf.create! valid_entity
        patch shelf_url(shelf),
              params: { shelf: shelf }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the shelf" do
        shelf = Shelf.create! valid_entity
        patch shelf_url(shelf),
              params: { shelf: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested shelf" do
      shelf = Shelf.create! valid_entity
      expect {
        delete shelf_url(shelf), headers: valid_headers, as: :json
      }.to change(Shelf, :count).by(-1)
    end
  end
end
